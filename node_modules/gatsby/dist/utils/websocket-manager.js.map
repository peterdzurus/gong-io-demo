{"version":3,"sources":["../../src/utils/websocket-manager.ts"],"names":["hashPaths","paths","map","path","update","digest","WebsocketManager","activePaths","Set","clients","errors","Map","pageResults","staticQueryResults","init","server","websocket","SocketIO","pingTimeout","cors","origin","cookie","updateServerActivePaths","serverActivePaths","client","activePath","add","on","socket","clientInfo","setActivePath","newActivePath","fallbackTo404","activePagePath","page","store","getState","mode","handshake","headers","referer","url","parse","forEach","message","errorID","send","type","payload","id","delete","_path","process","env","GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND","boundEmitStalePageDataPathsFromDirtyQueryTracking","emitStalePageDataPathsFromDirtyQueryTracking","bind","emitter","emitStalePageDataPathsFromStaticQueriesAssignment","getSocket","emitStaticQueryData","data","set","size","telemetry","trackCli","siteMeasurements","clientsCount","Array","from","debounce","emitPageData","emitError","dirtyQueries","queries","dirtyQueriesListToEmitViaWebsocket","emitStalePageDataPaths","dispatch","pendingTemplateDataWrite","pages","stalePageDataPaths","length","websocketManager"],"mappings":";;;;;;;AAEA;;AAEA;;AAIA;;AACA;;AACA;;AACA;;AACA;;AAZA;AA2BA,SAASA,SAAT,CAAmBC,KAAnB,EAAwD;AACtD,SAAOA,KAAK,CAACC,GAAN,CAAUC,IAAI,IAAI,wBAAY,QAAZ,EAAqBC,MAArB,CAA4BD,IAA5B,EAAkCE,MAAlC,CAA0C,KAA1C,CAAlB,CAAP;AACD;;AAOM,MAAMC,gBAAN,CAAuB;AAC5BC,EAAAA,WAAW,GAAgB,IAAIC,GAAJ,EAAhB;AACXC,EAAAA,OAAO,GAAqB,IAAID,GAAJ,EAArB;AACPE,EAAAA,MAAM,GAAwB,IAAIC,GAAJ,EAAxB;AACNC,EAAAA,WAAW,GAAmB,IAAID,GAAJ,EAAnB;AACXE,EAAAA,kBAAkB,GAAoB,IAAIF,GAAJ,EAApB;AAGlBG,EAAAA,IAAI,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgE;AACrE;AACA,UAAMC,SAAS,GAAG,IAAIC,cAAJ,CAAaF,MAAb,EAAqB;AACrC;AACA;AACA;AACAG,MAAAA,WAAW,EAAE,KAJwB;AAKrC;AACAC,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAE;AADJ,OAN+B;AASrCC,MAAAA,MAAM,EAAE;AAT6B,KAArB,CAAlB;AAWA,SAAKL,SAAL,GAAiBA,SAAjB;;AAEA,UAAMM,uBAAuB,GAAG,MAAY;AAC1C,YAAMC,iBAAiB,GAAG,IAAIf,GAAJ,EAA1B;;AACA,WAAK,MAAMgB,MAAX,IAAqB,KAAKf,OAA1B,EAAmC;AACjC,YAAIe,MAAM,CAACC,UAAX,EAAuB;AACrBF,UAAAA,iBAAiB,CAACG,GAAlB,CAAsBF,MAAM,CAACC,UAA7B;AACD;AACF;;AACD,WAAKlB,WAAL,GAAmBgB,iBAAnB;AACD,KARD;;AAUAP,IAAAA,SAAS,CAACW,EAAV,CAAc,YAAd,EAA2BC,MAAM,IAAI;AAAA;;AACnC,YAAMC,UAAuB,GAAG;AAC9BJ,QAAAA,UAAU,EAAE,IADkB;AAE9BG,QAAAA;AAF8B,OAAhC;AAIA,WAAKnB,OAAL,CAAaiB,GAAb,CAAiBG,UAAjB;;AAEA,YAAMC,aAAa,GAAG,CACpBC,aADoB,EAEpBC,aAAsB,GAAG,KAFL,KAGX;AACT,YAAIC,cAA6B,GAAG,IAApC;;AACA,YAAIF,aAAJ,EAAmB;AACjB,gBAAMG,IAAI,GAAG,oCACXC,aAAMC,QAAN,EADW,EAEXL,aAFW,EAGXC,aAHW,CAAb;;AAMA,cAAIE,IAAJ,EAAU;AACR;AACA;AACA,gBAAIA,IAAI,CAACG,IAAL,KAAe,KAAnB,EAAyB;AACvBJ,cAAAA,cAAc,GAAGF,aAAjB;AACD,aAFD,MAEO;AACLE,cAAAA,cAAc,GAAGC,IAAI,CAAC/B,IAAtB;AACD;AACF;AACF;;AACD0B,QAAAA,UAAU,CAACJ,UAAX,GAAwBQ,cAAxB;AACAX,QAAAA,uBAAuB;AACxB,OAxBD;;AA0BA,UAAIM,MAAJ,aAAIA,MAAJ,oCAAIA,MAAM,CAAEU,SAAZ,uEAAI,kBAAmBC,OAAvB,kDAAI,sBAA4BC,OAAhC,EAAyC;AACvC,cAAMrC,IAAI,GAAGsC,aAAIC,KAAJ,CAAUd,MAAM,CAACU,SAAP,CAAiBC,OAAjB,CAAyBC,OAAnC,EAA4CrC,IAAzD;;AACA2B,QAAAA,aAAa,CAAC3B,IAAD,EAAO,IAAP,CAAb;AACD;;AAED,WAAKO,MAAL,CAAYiC,OAAZ,CAAoB,CAACC,OAAD,EAAUC,OAAV,KAAsB;AACxCjB,QAAAA,MAAM,CAACkB,IAAP,CAAY;AACVC,UAAAA,IAAI,EAAG,cADG;AAEVC,UAAAA,OAAO,EAAE;AACPC,YAAAA,EAAE,EAAEJ,OADG;AAEPD,YAAAA;AAFO;AAFC,SAAZ;AAOD,OARD;AAUAhB,MAAAA,MAAM,CAACD,EAAP,CAAW,cAAX,EAA2BxB,IAAD,IAAwB;AAChD2B,QAAAA,aAAa,CAAC3B,IAAD,EAAO,IAAP,CAAb;AACD,OAFD;AAIAyB,MAAAA,MAAM,CAACD,EAAP,CAAW,YAAX,EAAwB,MAAY;AAClCG,QAAAA,aAAa,CAAC,IAAD,CAAb;AACA,aAAKrB,OAAL,CAAayC,MAAb,CAAoBrB,UAApB;AACD,OAHD;AAKAD,MAAAA,MAAM,CAACD,EAAP,CAAW,gBAAX,EAA6BwB,KAAD,IAAyB;AACnDrB,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAFD;AAGD,KA5DD;;AA8DA,QAAIsB,OAAO,CAACC,GAAR,CAAYC,mCAAhB,EAAqD;AACnD;AACA,YAAMC,iDAAiD,GACrD,KAAKC,4CAAL,CAAkDC,IAAlD,CAAuD,IAAvD,CADF;;AAEAC,qBAAQ/B,EAAR,CACG,aADH,EAEE4B,iDAFF;;AAIAG,qBAAQ/B,EAAR,CACG,aADH,EAEE4B,iDAFF;;AAIAG,qBAAQ/B,EAAR,CACG,aADH,EAEE4B,iDAFF;;AAIAG,qBAAQ/B,EAAR,CACG,iBADH,EAEE4B,iDAFF;AAID,KA3GoE,CA6GrE;;;AACAG,mBAAQ/B,EAAR,CACG,iCADH,EAEE,KAAKgC,iDAAL,CAAuDF,IAAvD,CAA4D,IAA5D,CAFF;;AAKA,WAAOzC,SAAP;AACD,GApHG;AAsHJ4C,EAAAA,SAAS,GAAG,MAA4B,KAAK5C,SAApC;AAET6C,EAAAA,mBAAmB,GAAIC,IAAD,IAAoC;AACxD,SAAKjD,kBAAL,CAAwBkD,GAAxB,CAA4BD,IAAI,CAACb,EAAjC,EAAqCa,IAArC;;AAEA,QAAI,KAAK9C,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAe8B,IAAf,CAAoB;AAAEC,QAAAA,IAAI,EAAG,mBAAT;AAA6BC,QAAAA,OAAO,EAAEc;AAAtC,OAApB;;AAEA,UAAI,KAAKrD,OAAL,CAAauD,IAAb,GAAoB,CAAxB,EAA2B;AACzBC,iCAAUC,QAAV,CACG,wCADH,EAEE;AACEC,UAAAA,gBAAgB,EAAE;AAChBC,YAAAA,YAAY,EAAE,KAAK3D,OAAL,CAAauD,IADX;AAEhB/D,YAAAA,KAAK,EAAED,SAAS,CAACqE,KAAK,CAACC,IAAN,CAAW,KAAK/D,WAAhB,CAAD;AAFA;AADpB,SAFF,EAQE;AAAEgE,UAAAA,QAAQ,EAAE;AAAZ,SARF;AAUD;AACF;AACF,GAnBkB;AAqBnBC,EAAAA,YAAY,GAAIV,IAAD,IAAkC;AAC/C,SAAKlD,WAAL,CAAiBmD,GAAjB,CAAqBD,IAAI,CAACb,EAA1B,EAA8Ba,IAA9B;;AAEA,QAAI,KAAK9C,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAe8B,IAAf,CAAoB;AAAEC,QAAAA,IAAI,EAAG,iBAAT;AAA2BC,QAAAA,OAAO,EAAEc;AAApC,OAApB;;AAEA,UAAI,KAAKrD,OAAL,CAAauD,IAAb,GAAoB,CAAxB,EAA2B;AACzBC,iCAAUC,QAAV,CACG,iCADH,EAEE;AACEC,UAAAA,gBAAgB,EAAE;AAChBC,YAAAA,YAAY,EAAE,KAAK3D,OAAL,CAAauD,IADX;AAEhB/D,YAAAA,KAAK,EAAED,SAAS,CAACqE,KAAK,CAACC,IAAN,CAAW,KAAK/D,WAAhB,CAAD;AAFA;AADpB,SAFF,EAQE;AAAEgE,UAAAA,QAAQ,EAAE;AAAZ,SARF;AAUD;AACF;AACF,GAnBW;AAqBZE,EAAAA,SAAS,GAAG,CAACxB,EAAD,EAAaL,OAAb,KAAwC;AAClD,QAAIA,OAAJ,EAAa;AACX,WAAKlC,MAAL,CAAYqD,GAAZ,CAAgBd,EAAhB,EAAoBL,OAApB;AACD,KAFD,MAEO;AACL,WAAKlC,MAAL,CAAYwC,MAAZ,CAAmBD,EAAnB;AACD;;AAED,QAAI,KAAKjC,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAe8B,IAAf,CAAoB;AAClBC,QAAAA,IAAI,EAAG,cADW;AAElBC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,EAAF;AAAML,UAAAA;AAAN;AAFS,OAApB;AAID;AACF,GAbQ;;AAeTY,EAAAA,4CAA4C,GAAS;AACnD,UAAMkB,YAAY,GAChBvC,aAAMC,QAAN,GAAiBuC,OAAjB,CAAyBC,kCAD3B;;AAGA,QAAI,KAAKC,sBAAL,CAA4BH,YAA5B,CAAJ,EAA+C;AAC7CvC,mBAAM2C,QAAN,CAAe,wDAAf;AACD;AACF;;AAEDnB,EAAAA,iDAAiD,CAC/CoB,wBAD+C,EAEzC;AACN,SAAKF,sBAAL,CACER,KAAK,CAACC,IAAN,CAAWS,wBAAwB,CAAC/B,OAAzB,CAAiCgC,KAA5C,CADF;AAGD;;AAEDH,EAAAA,sBAAsB,CAACI,kBAAD,EAA6C;AACjE,QAAIA,kBAAkB,CAACC,MAAnB,GAA4B,CAAhC,EAAmC;AACjC,UAAI,KAAKlE,SAAT,EAAoB;AAClB,aAAKA,SAAL,CAAe8B,IAAf,CAAoB;AAClBC,UAAAA,IAAI,EAAG,eADW;AAElBC,UAAAA,OAAO,EAAE;AAAEiC,YAAAA;AAAF;AAFS,SAApB;AAKA,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD;;AAtN2B;;;AAyNvB,MAAME,gBAAkC,GAAG,IAAI7E,gBAAJ,EAA3C","sourcesContent":["/* eslint-disable no-invalid-this */\n\nimport { store, emitter } from \"../redux\"\nimport { IAddPendingTemplateDataWriteAction } from \"../redux/types\"\nimport { clearDirtyQueriesListToEmitViaWebsocket } from \"../redux/actions/internal\"\nimport { Server as HTTPSServer } from \"https\"\nimport { Server as HTTPServer } from \"http\"\nimport { IPageDataWithQueryResult } from \"../utils/page-data\"\nimport telemetry from \"gatsby-telemetry\"\nimport url from \"url\"\nimport { createHash } from \"crypto\"\nimport { findPageByPath } from \"./find-page-by-path\"\nimport { Server as SocketIO, Socket } from \"socket.io\"\n\nexport interface IPageQueryResult {\n  id: string\n  result?: IPageDataWithQueryResult\n}\n\nexport interface IStaticQueryResult {\n  id: string\n  result: unknown // TODO: Improve this once we understand what the type is\n}\n\ntype PageResultsMap = Map<string, IPageQueryResult>\ntype QueryResultsMap = Map<string, IStaticQueryResult>\n\nfunction hashPaths(paths: Array<string>): Array<string> {\n  return paths.map(path => createHash(`sha256`).update(path).digest(`hex`))\n}\n\ninterface IClientInfo {\n  activePath: string | null\n  socket: Socket\n}\n\nexport class WebsocketManager {\n  activePaths: Set<string> = new Set()\n  clients: Set<IClientInfo> = new Set()\n  errors: Map<string, string> = new Map()\n  pageResults: PageResultsMap = new Map()\n  staticQueryResults: QueryResultsMap = new Map()\n  websocket: SocketIO | undefined\n\n  init = ({ server }: { server: HTTPSServer | HTTPServer }): SocketIO => {\n    // make typescript happy, else it complained about this.websocket being undefined\n    const websocket = new SocketIO(server, {\n      // we see ping-pong timeouts on gatsby-cloud when socket.io is running for a while\n      // increasing it should help\n      // @see https://github.com/socketio/socket.io/issues/3259#issuecomment-448058937\n      pingTimeout: 30000,\n      // whitelist all (https://github.com/expressjs/cors#configuration-options)\n      cors: {\n        origin: true,\n      },\n      cookie: true,\n    })\n    this.websocket = websocket\n\n    const updateServerActivePaths = (): void => {\n      const serverActivePaths = new Set<string>()\n      for (const client of this.clients) {\n        if (client.activePath) {\n          serverActivePaths.add(client.activePath)\n        }\n      }\n      this.activePaths = serverActivePaths\n    }\n\n    websocket.on(`connection`, socket => {\n      const clientInfo: IClientInfo = {\n        activePath: null,\n        socket,\n      }\n      this.clients.add(clientInfo)\n\n      const setActivePath = (\n        newActivePath: string | null,\n        fallbackTo404: boolean = false\n      ): void => {\n        let activePagePath: string | null = null\n        if (newActivePath) {\n          const page = findPageByPath(\n            store.getState(),\n            newActivePath,\n            fallbackTo404\n          )\n\n          if (page) {\n            // when it's SSR we don't want to return the page path but the actualy url used,\n            // this is necessary when matchPaths are used.\n            if (page.mode === `SSR`) {\n              activePagePath = newActivePath\n            } else {\n              activePagePath = page.path\n            }\n          }\n        }\n        clientInfo.activePath = activePagePath\n        updateServerActivePaths()\n      }\n\n      if (socket?.handshake?.headers?.referer) {\n        const path = url.parse(socket.handshake.headers.referer).path\n        setActivePath(path, true)\n      }\n\n      this.errors.forEach((message, errorID) => {\n        socket.send({\n          type: `overlayError`,\n          payload: {\n            id: errorID,\n            message,\n          },\n        })\n      })\n\n      socket.on(`registerPath`, (path: string): void => {\n        setActivePath(path, true)\n      })\n\n      socket.on(`disconnect`, (): void => {\n        setActivePath(null)\n        this.clients.delete(clientInfo)\n      })\n\n      socket.on(`unregisterPath`, (_path: string): void => {\n        setActivePath(null)\n      })\n    })\n\n    if (process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND) {\n      // page-data marked stale due to dirty query tracking\n      const boundEmitStalePageDataPathsFromDirtyQueryTracking =\n        this.emitStalePageDataPathsFromDirtyQueryTracking.bind(this)\n      emitter.on(\n        `CREATE_PAGE`,\n        boundEmitStalePageDataPathsFromDirtyQueryTracking\n      )\n      emitter.on(\n        `CREATE_NODE`,\n        boundEmitStalePageDataPathsFromDirtyQueryTracking\n      )\n      emitter.on(\n        `DELETE_NODE`,\n        boundEmitStalePageDataPathsFromDirtyQueryTracking\n      )\n      emitter.on(\n        `QUERY_EXTRACTED`,\n        boundEmitStalePageDataPathsFromDirtyQueryTracking\n      )\n    }\n\n    // page-data marked stale due to static query hashes change\n    emitter.on(\n      `ADD_PENDING_TEMPLATE_DATA_WRITE`,\n      this.emitStalePageDataPathsFromStaticQueriesAssignment.bind(this)\n    )\n\n    return websocket\n  }\n\n  getSocket = (): SocketIO | undefined => this.websocket\n\n  emitStaticQueryData = (data: IStaticQueryResult): void => {\n    this.staticQueryResults.set(data.id, data)\n\n    if (this.websocket) {\n      this.websocket.send({ type: `staticQueryResult`, payload: data })\n\n      if (this.clients.size > 0) {\n        telemetry.trackCli(\n          `WEBSOCKET_EMIT_STATIC_PAGE_DATA_UPDATE`,\n          {\n            siteMeasurements: {\n              clientsCount: this.clients.size,\n              paths: hashPaths(Array.from(this.activePaths)),\n            },\n          },\n          { debounce: true }\n        )\n      }\n    }\n  }\n\n  emitPageData = (data: IPageQueryResult): void => {\n    this.pageResults.set(data.id, data)\n\n    if (this.websocket) {\n      this.websocket.send({ type: `pageQueryResult`, payload: data })\n\n      if (this.clients.size > 0) {\n        telemetry.trackCli(\n          `WEBSOCKET_EMIT_PAGE_DATA_UPDATE`,\n          {\n            siteMeasurements: {\n              clientsCount: this.clients.size,\n              paths: hashPaths(Array.from(this.activePaths)),\n            },\n          },\n          { debounce: true }\n        )\n      }\n    }\n  }\n\n  emitError = (id: string, message?: string): void => {\n    if (message) {\n      this.errors.set(id, message)\n    } else {\n      this.errors.delete(id)\n    }\n\n    if (this.websocket) {\n      this.websocket.send({\n        type: `overlayError`,\n        payload: { id, message },\n      })\n    }\n  }\n\n  emitStalePageDataPathsFromDirtyQueryTracking(): void {\n    const dirtyQueries =\n      store.getState().queries.dirtyQueriesListToEmitViaWebsocket\n\n    if (this.emitStalePageDataPaths(dirtyQueries)) {\n      store.dispatch(clearDirtyQueriesListToEmitViaWebsocket())\n    }\n  }\n\n  emitStalePageDataPathsFromStaticQueriesAssignment(\n    pendingTemplateDataWrite: IAddPendingTemplateDataWriteAction\n  ): void {\n    this.emitStalePageDataPaths(\n      Array.from(pendingTemplateDataWrite.payload.pages)\n    )\n  }\n\n  emitStalePageDataPaths(stalePageDataPaths: Array<string>): boolean {\n    if (stalePageDataPaths.length > 0) {\n      if (this.websocket) {\n        this.websocket.send({\n          type: `stalePageData`,\n          payload: { stalePageDataPaths },\n        })\n\n        return true\n      }\n    }\n    return false\n  }\n}\n\nexport const websocketManager: WebsocketManager = new WebsocketManager()\n"],"file":"websocket-manager.js"}