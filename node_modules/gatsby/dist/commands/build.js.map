{"version":3,"sources":["../../src/commands/build.ts"],"names":["module","exports","build","program","global","__GATSBY","buildId","root","directory","process","env","VERBOSE","verbose","report","setVerbose","profile","warn","name","sitePackageJson","sitePath","lastRun","Date","now","pid","publicDir","path","join","GATSBY_OPEN_TRACING_CONFIG_FILE","openTracingConfigFile","buildActivity","phantomActivity","start","telemetry","trackCli","exitCode","buildSpan","span","setTag","gatsbyNodeGraphQLFunction","workerPool","parentSpan","engineBundlingPromises","push","graphqlRunner","GraphQLRunner","store","collectStats","graphqlTracing","queryIds","pageQueryIds","filter","query","mode","waitForWorkerPoolRestart","Promise","resolve","GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING","restart","graphql","buildActivityTimer","activityTimer","stats","waitForCompilerClose","result","hasWarnings","rawMessages","toJson","moduleTrace","warnings","err","panic","Stage","BuildJavascript","end","webpackCompilationHash","hash","getState","appDataUtil","exists","dispatch","type","payload","rewriteActivityTimer","write","isTrackingEnabled","bundleSizes","assets","asset","endsWith","map","size","pageDataSizes","pageDataStats","values","addSiteMeasurement","bundleStats","aggregateStats","queryStats","getStats","actions","setProgramStatus","db","saveState","buildSSRBundleActivityProgress","waitForCompilerCloseBuildHtml","BuildHTML","all","then","send","action","keepPageRenderer","toRegenerate","toDelete","waitWorkerPoolEnd","pagesCount","length","totalPagesCount","pages","postBuildActivityTimer","e","message","state","reporter","_renderPageTree","components","functions","info","uptime","finish","logPages","writeToFile","createdFilesPath","createdFilesContent","deletedFilesPath","deletedFilesContent","fs","writeFile"],"mappings":"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","sourcesContent":["import path from \"path\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport signalExit from \"signal-exit\"\nimport fs from \"fs-extra\"\nimport telemetry from \"gatsby-telemetry\"\nimport { updateSiteMetadata, isTruthy } from \"gatsby-core-utils\"\nimport {\n  buildRenderer,\n  buildHTMLPagesAndDeleteStaleArtifacts,\n  IBuildArgs,\n} from \"./build-html\"\nimport { buildProductionBundle } from \"./build-javascript\"\nimport { bootstrap } from \"../bootstrap\"\nimport apiRunnerNode from \"../utils/api-runner-node\"\nimport { GraphQLRunner } from \"../query/graphql-runner\"\nimport { copyStaticDirs } from \"../utils/get-static-dir\"\nimport { initTracer, stopTracer } from \"../utils/tracer\"\nimport * as db from \"../redux/save-state\"\nimport { store } from \"../redux\"\nimport * as appDataUtil from \"../utils/app-data\"\nimport { flush as flushPendingPageDataWrites } from \"../utils/page-data\"\nimport {\n  structureWebpackErrors,\n  reportWebpackWarnings,\n} from \"../utils/webpack-error-utils\"\nimport {\n  userGetsSevenDayFeedback,\n  userPassesFeedbackRequestHeuristic,\n  showFeedbackRequest,\n  showSevenDayFeedbackRequest,\n} from \"../utils/feedback\"\nimport { actions } from \"../redux/actions\"\nimport { waitUntilAllJobsComplete } from \"../utils/wait-until-jobs-complete\"\nimport { Stage } from \"./types\"\nimport {\n  calculateDirtyQueries,\n  runStaticQueries,\n  runPageQueries,\n  writeOutRequires,\n} from \"../services\"\nimport {\n  markWebpackStatusAsPending,\n  markWebpackStatusAsDone,\n} from \"../utils/webpack-status\"\nimport { showExperimentNotices } from \"../utils/show-experiment-notice\"\nimport {\n  mergeWorkerState,\n  runQueriesInWorkersQueue,\n} from \"../utils/worker/pool\"\nimport { createGraphqlEngineBundle } from \"../schema/graphql-engine/bundle-webpack\"\nimport { createPageSSRBundle } from \"../utils/page-ssr-module/bundle-webpack\"\nimport { shouldGenerateEngines } from \"../utils/engines-helpers\"\nimport uuidv4 from \"uuid/v4\"\nimport reporter from \"gatsby-cli/lib/reporter\"\n\nmodule.exports = async function build(program: IBuildArgs): Promise<void> {\n  // global gatsby object to use without store\n  global.__GATSBY = {\n    buildId: uuidv4(),\n    root: program!.directory,\n  }\n\n  if (isTruthy(process.env.VERBOSE)) {\n    program.verbose = true\n  }\n  report.setVerbose(program.verbose)\n\n  if (program.profile) {\n    report.warn(\n      `React Profiling is enabled. This can have a performance impact. See https://www.gatsbyjs.org/docs/profiling-site-performance-with-react-profiler/#performance-impact`\n    )\n  }\n\n  await updateSiteMetadata({\n    name: program.sitePackageJson.name,\n    sitePath: program.directory,\n    lastRun: Date.now(),\n    pid: process.pid,\n  })\n\n  markWebpackStatusAsPending()\n\n  const publicDir = path.join(program.directory, `public`)\n  initTracer(\n    process.env.GATSBY_OPEN_TRACING_CONFIG_FILE || program.openTracingConfigFile\n  )\n  const buildActivity = report.phantomActivity(`build`)\n  buildActivity.start()\n\n  telemetry.trackCli(`BUILD_START`)\n  signalExit(exitCode => {\n    telemetry.trackCli(`BUILD_END`, {\n      exitCode: exitCode as number | undefined,\n    })\n  })\n\n  const buildSpan = buildActivity.span\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { gatsbyNodeGraphQLFunction, workerPool } = await bootstrap({\n    program,\n    parentSpan: buildSpan,\n  })\n\n  const engineBundlingPromises: Array<Promise<any>> = []\n\n  if (_CFLAGS_.GATSBY_MAJOR === `4` && shouldGenerateEngines()) {\n    // bundle graphql-engine\n    engineBundlingPromises.push(createGraphqlEngineBundle())\n  }\n\n  const graphqlRunner = new GraphQLRunner(store, {\n    collectStats: true,\n    graphqlTracing: program.graphqlTracing,\n  })\n\n  const { queryIds } = await calculateDirtyQueries({ store })\n\n  // Only run queries with mode SSG\n  if (_CFLAGS_.GATSBY_MAJOR === `4`) {\n    queryIds.pageQueryIds = queryIds.pageQueryIds.filter(\n      query => query.mode === `SSG`\n    )\n  }\n\n  let waitForWorkerPoolRestart = Promise.resolve()\n  if (process.env.GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING) {\n    await runQueriesInWorkersQueue(workerPool, queryIds)\n    // Jobs still might be running even though query running finished\n    await waitUntilAllJobsComplete()\n    // Restart worker pool before merging state to lower memory pressure while merging state\n    waitForWorkerPoolRestart = workerPool.restart()\n    await mergeWorkerState(workerPool)\n  } else {\n    await runStaticQueries({\n      queryIds,\n      parentSpan: buildSpan,\n      store,\n      graphqlRunner,\n    })\n\n    await runPageQueries({\n      queryIds,\n      graphqlRunner,\n      parentSpan: buildSpan,\n      store,\n    })\n  }\n\n  await writeOutRequires({\n    store,\n    parentSpan: buildSpan,\n  })\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: gatsbyNodeGraphQLFunction,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirs()\n\n  const buildActivityTimer = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  buildActivityTimer.start()\n  let stats\n  let waitForCompilerClose\n  try {\n    const result = await buildProductionBundle(program, buildActivityTimer.span)\n    stats = result.stats\n    waitForCompilerClose = result.waitForCompilerClose\n\n    if (stats.hasWarnings()) {\n      const rawMessages = stats.toJson({ moduleTrace: false })\n      reportWebpackWarnings(rawMessages.warnings, report)\n    }\n  } catch (err) {\n    buildActivityTimer.panic(structureWebpackErrors(Stage.BuildJavascript, err))\n  } finally {\n    buildActivityTimer.end()\n  }\n\n  if (_CFLAGS_.GATSBY_MAJOR === `4` && shouldGenerateEngines()) {\n    // client bundle is produced so static query maps should be ready\n    engineBundlingPromises.push(createPageSSRBundle())\n  }\n\n  const webpackCompilationHash = stats.hash\n  if (\n    webpackCompilationHash !== store.getState().webpackCompilationHash ||\n    !appDataUtil.exists(publicDir)\n  ) {\n    store.dispatch({\n      type: `SET_WEBPACK_COMPILATION_HASH`,\n      payload: webpackCompilationHash,\n    })\n\n    const rewriteActivityTimer = report.activityTimer(\n      `Rewriting compilation hashes`,\n      {\n        parentSpan: buildSpan,\n      }\n    )\n    rewriteActivityTimer.start()\n\n    await appDataUtil.write(publicDir, webpackCompilationHash)\n\n    rewriteActivityTimer.end()\n  }\n\n  await flushPendingPageDataWrites(buildSpan)\n  markWebpackStatusAsDone()\n\n  if (telemetry.isTrackingEnabled()) {\n    // transform asset size to kB (from bytes) to fit 64 bit to numbers\n    const bundleSizes = stats\n      .toJson({ assets: true })\n      .assets.filter(asset => asset.name.endsWith(`.js`))\n      .map(asset => asset.size / 1000)\n    const pageDataSizes = [...store.getState().pageDataStats.values()]\n\n    telemetry.addSiteMeasurement(`BUILD_END`, {\n      bundleStats: telemetry.aggregateStats(bundleSizes),\n      pageDataStats: telemetry.aggregateStats(pageDataSizes),\n      queryStats: graphqlRunner.getStats(),\n    })\n  }\n\n  store.dispatch(actions.setProgramStatus(`BOOTSTRAP_QUERY_RUNNING_FINISHED`))\n\n  await db.saveState()\n\n  await waitUntilAllJobsComplete()\n\n  // we need to save it again to make sure our latest state has been saved\n  await db.saveState()\n\n  const buildSSRBundleActivityProgress = report.activityTimer(\n    `Building HTML renderer`,\n    { parentSpan: buildSpan }\n  )\n  buildSSRBundleActivityProgress.start()\n  let waitForCompilerCloseBuildHtml\n  try {\n    const result = await buildRenderer(\n      program,\n      Stage.BuildHTML,\n      buildSSRBundleActivityProgress.span\n    )\n    waitForCompilerCloseBuildHtml = result.waitForCompilerClose\n\n    if (_CFLAGS_.GATSBY_MAJOR === `4` && shouldGenerateEngines()) {\n      Promise.all(engineBundlingPromises).then(() => {\n        if (process.send) {\n          process.send({\n            type: `LOG_ACTION`,\n            action: {\n              type: `ENGINES_READY`,\n            },\n          })\n        }\n      })\n    }\n  } catch (err) {\n    buildActivityTimer.panic(structureWebpackErrors(Stage.BuildHTML, err))\n  } finally {\n    buildSSRBundleActivityProgress.end()\n  }\n\n  if (_CFLAGS_.GATSBY_MAJOR === `4` && shouldGenerateEngines()) {\n    // well, tbf we should just generate this in `.cache` and avoid deleting it :shrug:\n    program.keepPageRenderer = true\n  }\n\n  await waitForWorkerPoolRestart\n\n  const { toRegenerate, toDelete } =\n    await buildHTMLPagesAndDeleteStaleArtifacts({\n      program,\n      workerPool,\n      buildSpan,\n    })\n\n  const waitWorkerPoolEnd = Promise.all(workerPool.end())\n\n  telemetry.addSiteMeasurement(`BUILD_END`, {\n    pagesCount: toRegenerate.length, // number of html files that will be written\n    totalPagesCount: store.getState().pages.size, // total number of pages\n  })\n\n  const postBuildActivityTimer = report.activityTimer(`onPostBuild`, {\n    parentSpan: buildSpan,\n  })\n  postBuildActivityTimer.start()\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: gatsbyNodeGraphQLFunction,\n    parentSpan: postBuildActivityTimer.span,\n  })\n  postBuildActivityTimer.end()\n\n  // Wait for any jobs that were started in onPostBuild\n  // This could occur due to queries being run which invoke sharp for instance\n  await waitUntilAllJobsComplete()\n\n  try {\n    await waitWorkerPoolEnd\n  } catch (e) {\n    report.warn(`Error when closing WorkerPool: ${e.message}`)\n  }\n\n  // Make sure we saved the latest state so we have all jobs cached\n  await db.saveState()\n\n  await Promise.all([waitForCompilerClose, waitForCompilerCloseBuildHtml])\n\n  const state = store.getState()\n  reporter._renderPageTree({\n    components: state.components,\n    functions: state.functions,\n    pages: state.pages,\n    root: state.program.directory,\n  })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n  await stopTracer()\n  buildActivity.end()\n\n  if (program.logPages) {\n    if (toRegenerate.length) {\n      report.info(\n        `Built pages:\\n${toRegenerate\n          .map(path => `Updated page: ${path}`)\n          .join(`\\n`)}`\n      )\n    }\n\n    if (toDelete.length) {\n      report.info(\n        `Deleted pages:\\n${toDelete\n          .map(path => `Deleted page: ${path}`)\n          .join(`\\n`)}`\n      )\n    }\n  }\n\n  if (program.writeToFile) {\n    const createdFilesPath = path.resolve(\n      `${program.directory}/.cache`,\n      `newPages.txt`\n    )\n    const createdFilesContent = toRegenerate.length\n      ? `${toRegenerate.join(`\\n`)}\\n`\n      : ``\n\n    const deletedFilesPath = path.resolve(\n      `${program.directory}/.cache`,\n      `deletedPages.txt`\n    )\n    const deletedFilesContent = toDelete.length\n      ? `${toDelete.join(`\\n`)}\\n`\n      : ``\n\n    await fs.writeFile(createdFilesPath, createdFilesContent, `utf8`)\n    report.info(`.cache/newPages.txt created`)\n\n    await fs.writeFile(deletedFilesPath, deletedFilesContent, `utf8`)\n    report.info(`.cache/deletedPages.txt created`)\n  }\n\n  await Promise.all(engineBundlingPromises)\n\n  showExperimentNotices()\n\n  if (await userGetsSevenDayFeedback()) {\n    showSevenDayFeedbackRequest()\n  } else if (await userPassesFeedbackRequestHeuristic()) {\n    showFeedbackRequest()\n  }\n}\n"],"file":"build.js"}