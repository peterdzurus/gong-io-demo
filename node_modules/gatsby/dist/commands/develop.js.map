{"version":3,"sources":["../../src/commands/develop.ts"],"names":["requireUncached","file","require","cache","resolve","e","doesConfigChangeRequireRestart","lastConfig","newConfig","replacer","_","v","RegExp","toString","oldConfigString","JSON","stringify","siteMetadata","newConfigString","getDebugPort","port","getDebugInfo","program","Object","prototype","hasOwnProperty","call","inspect","break","inspectBrk","ControllableScript","constructor","script","debugInfo","start","args","tmpFileName","tmp","tmpNameSync","tmpdir","path","join","process","cwd","fs","outputFileSync","isRunning","push","execa","node","env","GATSBY_NODE_GLOBALS","global","__GATSBY","stdio","stop","signal","code","Error","kill","send","type","action","payload","err","Promise","on","removeAllListeners","undefined","onMessage","callback","onExit","msg","isRestarting","REGEX_IP","module","exports","buildId","root","directory","parseInt","developProcessPath","telemetryServerPath","message","exit","proxyPort","rootFile","statusServerPort","developPort","telemetryServerPort","all","INTERNAL_STATUS_PORT","https","reporter","panic","sslHost","host","test","ssl","name","caFile","certFile","keyFile","proxy","targetPort","developProcess","telemetryServerProcess","unlocks","statusUnlock","developUnlock","telemetryUnlock","sitePackageJson","sitePath","pid","lastRun","Date","now","data","console","error","concat","statusServer","createServer","http","listen","io","SocketIO","cors","origin","cookie","handleChildProcessIPC","emit","serveSite","socket","respond","serveRestartingScreen","files","watcher","chokidar","watch","filePath","basename","warn","dirtyFile","shutdownServices","_code","services","close","server","forEach","unlock","catch","then"],"mappings":"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","sourcesContent":["// NOTE(@mxstbr): Do not use the reporter in this file, as that has side-effects on import which break structured logging\nimport path from \"path\"\nimport http from \"http\"\nimport https from \"https\"\nimport tmp from \"tmp\"\nimport { ChildProcess } from \"child_process\"\nimport execa from \"execa\"\nimport chokidar from \"chokidar\"\nimport getRandomPort from \"detect-port\"\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\"\nimport { Server as SocketIO } from \"socket.io\"\nimport fs from \"fs-extra\"\nimport onExit from \"signal-exit\"\nimport {\n  isCI,\n  slash,\n  createServiceLock,\n  getService,\n  updateSiteMetadata,\n  UnlockFn,\n} from \"gatsby-core-utils\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { getSslCert } from \"../utils/get-ssl-cert\"\nimport { IProxyControls, startDevelopProxy } from \"../utils/develop-proxy\"\nimport { IProgram, IDebugInfo } from \"./types\"\nimport { flush as telemetryFlush } from \"gatsby-telemetry\"\nimport uuidv4 from \"uuid/v4\"\n\n// Adapted from https://stackoverflow.com/a/16060619\nconst requireUncached = (file: string): any => {\n  try {\n    delete require.cache[require.resolve(file)]\n  } catch (e) {\n    return null\n  }\n\n  try {\n    return require(file)\n  } catch (e) {\n    return null\n  }\n}\n\n// Heuristics for gatsby-config.js, as not all changes to it require a full restart to take effect\nconst doesConfigChangeRequireRestart = (\n  lastConfig: Record<string, any>,\n  newConfig: Record<string, any>\n): boolean => {\n  // Ignore changes to siteMetadata\n  const replacer = (_, v): string | void => {\n    if (typeof v === `function` || v instanceof RegExp) {\n      return v.toString()\n    } else {\n      return v\n    }\n  }\n\n  const oldConfigString = JSON.stringify(\n    { ...lastConfig, siteMetadata: null },\n    replacer\n  )\n  const newConfigString = JSON.stringify(\n    { ...newConfig, siteMetadata: null },\n    replacer\n  )\n\n  if (oldConfigString === newConfigString) return false\n\n  return true\n}\n\n// Return a user-supplied port otherwise the default Node.js debugging port\nconst getDebugPort = (port?: number): number => port ?? 9229\n\nexport const getDebugInfo = (program: IProgram): IDebugInfo | null => {\n  if (Object.prototype.hasOwnProperty.call(program, `inspect`)) {\n    return {\n      port: getDebugPort(program.inspect),\n      break: false,\n    }\n  } else if (Object.prototype.hasOwnProperty.call(program, `inspectBrk`)) {\n    return {\n      port: getDebugPort(program.inspectBrk),\n      break: true,\n    }\n  } else {\n    return null\n  }\n}\n\nclass ControllableScript {\n  private process?: ChildProcess\n  private script\n  private debugInfo: IDebugInfo | null\n  public isRunning\n  constructor(script, debugInfo: IDebugInfo | null) {\n    this.script = script\n    this.debugInfo = debugInfo\n  }\n  start(): void {\n    const args: Array<string> = []\n    const tmpFileName = tmp.tmpNameSync({\n      tmpdir: path.join(process.cwd(), `.cache`),\n    })\n    fs.outputFileSync(tmpFileName, this.script)\n    this.isRunning = true\n    // Passing --inspect isn't necessary for the child process to launch a port but it allows some editors to automatically attach\n    if (this.debugInfo) {\n      if (this.debugInfo.break) {\n        args.push(`--inspect-brk=${this.debugInfo.port}`)\n      } else {\n        args.push(`--inspect=${this.debugInfo.port}`)\n      }\n    }\n\n    this.process = execa.node(tmpFileName, args, {\n      env: {\n        ...process.env,\n        GATSBY_NODE_GLOBALS: JSON.stringify(global.__GATSBY ?? {}),\n      },\n      stdio: [`inherit`, `inherit`, `inherit`, `ipc`],\n    })\n  }\n  async stop(\n    signal: NodeJS.Signals | null = null,\n    code?: number\n  ): Promise<void> {\n    if (!this.process) {\n      throw new Error(`Trying to stop the process before starting it`)\n    }\n\n    this.isRunning = false\n    try {\n      if (signal) {\n        this.process.kill(signal)\n      } else {\n        this.process.send(\n          {\n            type: `COMMAND`,\n            action: {\n              type: `EXIT`,\n              payload: code,\n            },\n          },\n          () => {\n            // The try/catch won't suffice for this process.send\n            // So use the callback to manually catch the Error, otherwise it'll be thrown\n            // Ref: https://nodejs.org/api/child_process.html#child_process_subprocess_send_message_sendhandle_options_callback\n          }\n        )\n      }\n    } catch (err) {\n      // Ignore error if process has crashed or already quit.\n      // Ref: https://github.com/gatsbyjs/gatsby/issues/28011#issuecomment-877302917\n    }\n\n    return new Promise(resolve => {\n      if (!this.process) {\n        throw new Error(`Trying to stop the process before starting it`)\n      }\n\n      this.process.on(`exit`, () => {\n        if (this.process) {\n          this.process.removeAllListeners()\n        }\n        this.process = undefined\n        resolve()\n      })\n    })\n  }\n  onMessage(callback: (msg: any) => void): void {\n    if (!this.process) {\n      throw new Error(`Trying to attach message handler before process started`)\n    }\n    this.process.on(`message`, callback)\n  }\n  onExit(\n    callback: (code: number | null, signal: NodeJS.Signals | null) => void\n  ): void {\n    if (!this.process) {\n      throw new Error(`Trying to attach exit handler before process started`)\n    }\n    this.process.on(`exit`, callback)\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  send(msg: any): void {\n    if (!this.process) {\n      throw new Error(`Trying to send a message before process started`)\n    }\n\n    this.process.send(msg)\n  }\n}\n\nlet isRestarting\n\n// checks if a string is a valid ip\nconst REGEX_IP =\n  /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$/\n\nmodule.exports = async (program: IProgram): Promise<void> => {\n  global.__GATSBY = {\n    buildId: uuidv4(),\n    root: program.directory,\n  }\n\n  // In some cases, port can actually be a string. But our codebase is expecting it to be a number.\n  // So we want to early just force it to a number to ensure we always act on a correct type.\n  program.port = parseInt(program.port + ``, 10)\n  const developProcessPath = slash(require.resolve(`./develop-process`))\n  const telemetryServerPath = slash(\n    require.resolve(`../utils/telemetry-server`)\n  )\n\n  try {\n    program.port = await detectPortInUseAndPrompt(program.port)\n  } catch (e) {\n    if (e.message === `USER_REJECTED`) {\n      process.exit(0)\n    }\n\n    throw e\n  }\n\n  // Run the actual develop server on a random port, and the proxy on the program port\n  // which users will access\n  const proxyPort = program.port\n  const debugInfo = getDebugInfo(program)\n\n  const rootFile = (file: string): string => path.join(program.directory, file)\n\n  // Require gatsby-config.js before accessing process.env, to enable the user to change\n  // environment variables from the config file.\n  let lastConfig = requireUncached(rootFile(`gatsby-config.js`))\n\n  // INTERNAL_STATUS_PORT allows for setting the websocket port used for monitoring\n  // when the browser should prompt the user to restart the develop process.\n  // This port is randomized by default and in most cases should never be required to configure.\n  // It is exposed for environments where port access needs to be explicit, such as with Docker.\n  // As the port is meant for internal usage only, any attempt to interface with features\n  // it exposes via third-party software is not supported.\n  const [statusServerPort, developPort, telemetryServerPort] =\n    await Promise.all([\n      getRandomPort(process.env.INTERNAL_STATUS_PORT),\n      getRandomPort(),\n      getRandomPort(),\n    ])\n\n  // In order to enable custom ssl, --cert-file --key-file and -https flags must all be\n  // used together\n  if ((program[`cert-file`] || program[`key-file`]) && !program.https) {\n    reporter.panic(\n      `for custom ssl --https, --cert-file, and --key-file must be used together`\n    )\n  }\n\n  // Check if https is enabled, then create or get SSL cert.\n  // Certs are named 'devcert' and issued to the host.\n  // NOTE(@mxstbr): We mutate program.ssl _after_ passing it\n  // to the develop process controllable script above because\n  // that would mean we double SSL browser => proxy => server\n  if (program.https) {\n    const sslHost =\n      program.host === `0.0.0.0` || program.host === `::`\n        ? `localhost`\n        : program.host\n\n    if (REGEX_IP.test(sslHost)) {\n      reporter.panic(\n        `You're trying to generate a ssl certificate for an IP (${sslHost}). Please use a hostname instead.`\n      )\n    }\n\n    const ssl = await getSslCert({\n      name: sslHost,\n      caFile: program[`ca-file`],\n      certFile: program[`cert-file`],\n      keyFile: program[`key-file`],\n      directory: program.directory,\n    })\n\n    if (ssl) {\n      program.ssl = ssl\n    }\n  }\n\n  // NOTE(@mxstbr): We need to start the develop proxy before the develop process to ensure\n  // codesandbox detects the right port to expose by default\n  const proxy = startDevelopProxy({\n    proxyPort: proxyPort,\n    targetPort: developPort,\n    program,\n  })\n\n  const developProcess = new ControllableScript(\n    `\n    const cmd = require(${JSON.stringify(developProcessPath)});\n    const args = ${JSON.stringify({\n      ...program,\n      port: developPort,\n      proxyPort,\n      // Don't pass SSL options down to the develop process, it should always use HTTP\n      ssl: null,\n      debugInfo,\n    })};\n    cmd(args);\n  `,\n    debugInfo\n  )\n\n  const telemetryServerProcess = new ControllableScript(\n    `require(${JSON.stringify(telemetryServerPath)}).default(${JSON.stringify(\n      telemetryServerPort\n    )})`,\n    null\n  )\n\n  let unlocks: Array<UnlockFn | null> = []\n  if (!isCI()) {\n    const statusUnlock = await createServiceLock(\n      program.directory,\n      `developstatusserver`,\n      {\n        port: statusServerPort,\n      }\n    )\n    const developUnlock = await createServiceLock(\n      program.directory,\n      `developproxy`,\n      {\n        port: proxyPort,\n      }\n    )\n    const telemetryUnlock = await createServiceLock(\n      program.directory,\n      `telemetryserver`,\n      {\n        port: telemetryServerPort,\n      }\n    )\n    await updateSiteMetadata({\n      name: program.sitePackageJson.name,\n      sitePath: program.directory,\n      pid: process.pid,\n      lastRun: Date.now(),\n    })\n\n    if (!statusUnlock || !developUnlock) {\n      const data = await getService(program.directory, `developproxy`)\n      const port = data?.port || 8000\n      console.error(\n        `Looks like develop for this site is already running, can you visit ${\n          program.ssl ? `https:` : `http:`\n        }//localhost:${port} ? If it is not, try again in five seconds!`\n      )\n      process.exit(1)\n    }\n\n    unlocks = unlocks.concat([statusUnlock, developUnlock, telemetryUnlock])\n  }\n\n  const statusServer = program.ssl\n    ? https.createServer(program.ssl)\n    : http.createServer()\n  statusServer.listen(statusServerPort)\n\n  const io = new SocketIO(statusServer, {\n    // whitelist all (https://github.com/expressjs/cors#configuration-options)\n    cors: {\n      origin: true,\n    },\n    cookie: true,\n  })\n\n  const handleChildProcessIPC = (msg): void => {\n    if (msg.type === `HEARTBEAT`) return\n    if (process.send) {\n      // Forward IPC\n      process.send(msg)\n    }\n\n    io.emit(`structured-log`, msg)\n\n    if (\n      msg.type === `LOG_ACTION` &&\n      msg.action.type === `SET_STATUS` &&\n      msg.action.payload === `SUCCESS`\n    ) {\n      proxy.serveSite()\n    }\n  }\n\n  io.on(`connection`, socket => {\n    socket.on(`develop:restart`, async respond => {\n      isRestarting = true\n      proxy.serveRestartingScreen()\n      // respond() responds to the client, which in our case prompts it to reload the page to show the restarting screen\n      if (respond) respond(`develop:is-starting`)\n      await developProcess.stop()\n      developProcess.start()\n      developProcess.onMessage(handleChildProcessIPC)\n      isRestarting = false\n    })\n  })\n\n  developProcess.start()\n  developProcess.onMessage(handleChildProcessIPC)\n\n  telemetryServerProcess.start()\n\n  // Plugins can call `process.exit` which would be sent to `develop-process` (child process)\n  // This needs to be propagated back to the parent process\n  developProcess.onExit(\n    (code: number | null, signal: NodeJS.Signals | null) => {\n      try {\n        telemetryFlush()\n      } catch (e) {\n        // nop\n      }\n      if (isRestarting) return\n      if (signal !== null) {\n        process.kill(process.pid, signal)\n        return\n      }\n      if (code !== null) {\n        process.exit(code)\n      }\n\n      // This should not happen:\n      // https://nodejs.org/api/child_process.html#child_process_event_exit\n      // The 'exit' event is emitted after the child process ends. If the process\n      // exited, code is the final exit code of the process, otherwise null.\n      // If the process terminated due to receipt of a signal, signal is the\n      // string name of the signal, otherwise null. One of the two will always be\n      // non - null.\n      //\n      // but just in case let do non-zero exit, because we are in situation\n      // we don't expect to be possible\n      process.exit(1)\n    }\n  )\n\n  const files = [rootFile(`gatsby-config.js`), rootFile(`gatsby-node.js`)]\n  let watcher: chokidar.FSWatcher\n\n  if (!isCI()) {\n    watcher = chokidar.watch(files).on(`change`, filePath => {\n      const file = path.basename(filePath)\n\n      if (file === `gatsby-config.js`) {\n        const newConfig = requireUncached(rootFile(`gatsby-config.js`))\n\n        if (!doesConfigChangeRequireRestart(lastConfig, newConfig)) {\n          lastConfig = newConfig\n          return\n        }\n\n        lastConfig = newConfig\n      }\n\n      console.warn(\n        `develop process needs to be restarted to apply the changes to ${file}`\n      )\n      io.emit(`structured-log`, {\n        type: `LOG_ACTION`,\n        action: {\n          type: `DEVELOP`,\n          payload: `RESTART_REQUIRED`,\n          dirtyFile: file,\n        },\n      })\n    })\n  }\n\n  // route ipc messaging to the original develop process\n  process.on(`message`, msg => {\n    developProcess.send(msg)\n  })\n\n  process.on(`SIGINT`, async () => {\n    await shutdownServices(\n      {\n        developProcess,\n        telemetryServerProcess,\n        unlocks,\n        statusServer,\n        proxy,\n        watcher,\n      },\n      `SIGINT`\n    )\n\n    process.exit(0)\n  })\n\n  process.on(`SIGTERM`, async () => {\n    await shutdownServices(\n      {\n        developProcess,\n        telemetryServerProcess,\n        unlocks,\n        statusServer,\n        proxy,\n        watcher,\n      },\n      `SIGTERM`\n    )\n\n    process.exit(0)\n  })\n\n  onExit((_code, signal) => {\n    shutdownServices(\n      {\n        developProcess,\n        telemetryServerProcess,\n        unlocks,\n        statusServer,\n        proxy,\n        watcher,\n      },\n      signal as NodeJS.Signals\n    )\n  })\n}\n\ninterface IShutdownServicesOptions {\n  statusServer: https.Server | http.Server\n  developProcess: ControllableScript\n  proxy: IProxyControls\n  unlocks: Array<UnlockFn | null>\n  watcher: chokidar.FSWatcher\n  telemetryServerProcess: ControllableScript\n}\n\nfunction shutdownServices(\n  {\n    statusServer,\n    developProcess,\n    proxy,\n    unlocks,\n    watcher,\n    telemetryServerProcess,\n  }: IShutdownServicesOptions,\n  signal: NodeJS.Signals\n): Promise<void> {\n  try {\n    telemetryFlush()\n  } catch (e) {\n    // nop\n  }\n  const services = [\n    developProcess.stop(signal),\n    telemetryServerProcess.stop(),\n    watcher?.close(),\n    new Promise(resolve => statusServer.close(resolve)),\n    new Promise(resolve => proxy.server.close(resolve)),\n  ]\n\n  unlocks.forEach(unlock => {\n    if (unlock) {\n      services.push(unlock())\n    }\n  })\n\n  return Promise.all(services)\n    .catch(() => {})\n    .then(() => {})\n}\n"],"file":"develop.js"}